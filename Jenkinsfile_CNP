#!groovy
import uk.gov.hmcts.contino.AppPipelineDsl

@Library("Infrastructure")

import uk.gov.hmcts.contino.GradleBuilder

def type = "java"
def product = "rpe"
def component = "send-letter-service"

def channel = '#bulk-print-build-notices'

secrets = [
  's2s-${env}': [
    secret('microservicekey-send-letter-tests', 'TEST_S2S_SECRET')
  ],
  'rpe-send-letter-${env}': [
    secret('ftp-user', 'TEST_FTP_USER'),
    secret('ftp-private-key', 'TEST_FTP_PRIVATE_KEY'),
    secret('ftp-public-key', 'TEST_FTP_PUBLIC_KEY')
  ]
]

static LinkedHashMap<String, Object> secret(String secretName, String envVar) {
  [ $class: 'AzureKeyVaultSecret',
    secretType: 'Secret',
    name: secretName,
    version: '',
    envVariable: envVar
  ]
}

GradleBuilder builder = new GradleBuilder(this, product)

// Vars for Kubernetes
env.PACT_BROKER_FULL_URL = 'https://pact-broker.platform.hmcts.net'
env.PACT_BROKER_URL = "pact-broker.platform.hmcts.net"
env.PACT_BROKER_PORT = "443"
env.PACT_BROKER_SCHEME = "https"

withPipeline(type , product, component) {
  after('akschartsinstall'){
    // vars needed for AKS testing
    env.TEST_S2S_NAME = 'send_letter_tests'
    env.TEST_S2S_URL = 'http://rpe-service-auth-provider-aat.service.core-compute-aat.internal'
    env.TEST_FTP_HOSTNAME = 'cmseft.services.xerox.com'
    env.TEST_FTP_PORT = 22
    env.TEST_FTP_FINGERPRINT = 'SHA256:3tX3DIkqd1Loz2alHfnt+qjHocfxk0YUOZHlnf9Zgdk'
    env.FTP_TARGET_FOLDER = 'TO_XEROX'
    env.TEST_FTP_REPORTS_FOLDER = 'FROM_XEROX'
    env.TEST_ENCRYPTION_ENABLED = true
  }

  after('test') {
    builder.gradle('integration')
  }

  enableDbMigration('rpe-send-letter')
  enableSlackNotifications(channel)
  enableAksStagingDeployment()
  disableLegacyDeployment()
  loadVaultSecrets(secrets)

  onMaster() {
    enablePactAs([AppPipelineDsl.PactRoles.PROVIDER])
  }
  def branchesToSync = ['demo', 'perftest']
  syncBranchesWithMaster(branchesToSync)
}
