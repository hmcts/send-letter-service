import org.flywaydb.gradle.task.FlywayMigrateTask

buildscript {
  ext {
    flywayVersion = '11.9.1'
    postgresqlVersion = '42.7.7'
  }
  dependencies {
    classpath("org.postgresql:postgresql:$postgresqlVersion") // must be compatible with flyway version
    classpath("org.flywaydb:flyway-database-postgresql:$flywayVersion") // flyway dependency/plugin versions must always match
  }
}

plugins {
  id 'application'
  id 'checkstyle'
  id 'pmd'
  id 'jacoco'
  id 'io.spring.dependency-management' version '1.1.7'
  id 'org.flywaydb.flyway' version "$flywayVersion"
  id 'org.springframework.boot' version '3.5.0'
  id 'org.owasp.dependencycheck' version '12.1.3'
  id 'com.github.ben-manes.versions' version '0.52.0'
  id 'org.sonarqube' version '6.2.0.5505'
}

flyway {
  url = System.getenv('FLYWAY_URL')
  user = System.getenv('FLYWAY_USER')
  password = System.getenv('FLYWAY_PASSWORD')
  baselineOnMigrate = true
  baselineVersion = '000'
}

group = 'uk.gov.hmcts.reform'
version = '0.1.1'

java {
  toolchain {
    languageVersion = JavaLanguageVersion.of(21)
  }
}

sourceSets {
  functionalTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  integrationTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }

  smokeTest {
    java {
      compileClasspath += main.output
      runtimeClasspath += main.output
    }
  }
}




tasks.withType(JavaCompile) {
  options.compilerArgs << "-Xlint:unchecked" << "-Werror"
}

tasks.withType(JavaExec).configureEach {
  javaLauncher.set(javaToolchains.launcherFor(java.toolchain))
}

test {
  failFast = true
}

task functional(type: Test) {
  description = 'Runs functional tests.'
  logger.lifecycle("Running functional Tests")
  group = 'Verification'

  testClassesDirs = sourceSets.functionalTest.output.classesDirs
  classpath = sourceSets.functionalTest.runtimeClasspath
}

task integration(type: Test) {
  logger.lifecycle("Running integration Tests")
  description = 'Runs integration tests.'
  group = 'Verification'

  testClassesDirs = sourceSets.integrationTest.output.classesDirs
  classpath = sourceSets.integrationTest.runtimeClasspath

  environment("FTP_PRIVATE_KEY", file('src/integrationTest/resources/keypair').text)
  environment("FTP_PUBLIC_KEY", file('src/integrationTest/resources/keypair.pub').text)
  environment("ENCRYPTION_PUBLIC_KEY", file('src/integrationTest/resources/encryption/pubkey.asc').text)

  failFast = true
}

task smoke(type: Test) {
  description = 'Runs Smoke tests.'
  logger.lifecycle("Running smoke Tests")
  group = 'Verification'
  testClassesDirs = sourceSets.smokeTest.output.classesDirs
  classpath = sourceSets.smokeTest.runtimeClasspath
}

tasks.withType(Test) {
  useJUnitPlatform()

  testLogging {
    exceptionFormat = 'full'
  }
}

task fortifyScan(type: JavaExec)  {
  mainClass.set("uk.gov.hmcts.fortifyclient.FortifyClientMainApp")
  classpath += sourceSets.test.runtimeClasspath
  jvmArgs = ['--add-opens=java.base/java.lang.reflect=ALL-UNNAMED']
}

checkstyle {
  maxWarnings = 0
  toolVersion = '10.15.0'
  // need to set configDir to rootDir otherwise submodule will use submodule/config/checkstyle
  getConfigDirectory().set(new File(rootDir, 'config/checkstyle'))
}

pmd {
  toolVersion = "7.7.0"
  ignoreFailures = true
  incrementalAnalysis = true
  sourceSets = [sourceSets.main, sourceSets.test, sourceSets.functionalTest, sourceSets.integrationTest, sourceSets.smokeTest]
  reportsDir = file("$project.buildDir/reports/pmd")
  ruleSetFiles = files("config/pmd/ruleset.xml")
}

jacocoTestReport {
  executionData(test, integration)
  reports {
    xml.required = true
    csv.required = false
    xml.outputLocation = file("${buildDir}/reports/jacoco/test/jacocoTestReport.xml")
  }
  afterEvaluate {
    getClassDirectories().from = getClassDirectories().files.collect {
      fileTree(dir: it, exclude: [
        'uk/gov/hmcts/reform/sendletter/config/**',
        '**/BasicLetterInfo.java'
      ])
    }
  }
}

project.tasks['sonarqube'].dependsOn jacocoTestReport
sonarqube {
  properties {
    property "sonar.projectName", "bulkprint-send-letter-service"
    property 'sonar.exclusions', "**/config/**, **/BasicLetterInfo.java, **/exception/**"
  }
}

// before committing a change, make sure task still works
dependencyUpdates {
  def isNonStable = { String version ->
    def stableKeyword = ['RELEASE', 'FINAL', 'GA'].any { qualifier -> version.toUpperCase().contains(qualifier) }
    def regex = /^[0-9,.v-]+$/
    return !stableKeyword && !(version ==~ regex)
  }
  rejectVersionIf { selection -> // <---- notice how the closure argument is named
    return isNonStable(selection.candidate.version) && !isNonStable(selection.currentVersion)
  }
}

// https://jeremylong.github.io/DependencyCheck/dependency-check-gradle/configuration.html
dependencyCheck {
  // Specifies if the build should be failed if a CVSS score above a specified level is identified.
  // range of 0-10 fails the build, anything greater and it doesn't fail the build
  failBuildOnCVSS = System.getProperty('dependencyCheck.failBuild') == 'true' ? 0 : 11
  suppressionFile = 'config/owasp/suppressions.xml'
  analyzers {
    // Disable scanning of .NET related binaries
    assemblyEnabled = false
  }
}

repositories {
  mavenLocal()
  mavenCentral()
  maven {
    url 'https://pkgs.dev.azure.com/hmcts/Artifacts/_packaging/hmcts-lib/maven/v1'
  }
  maven { url 'https://repository.apache.org/content/repositories/snapshots/' }
}

def versions = [
  bouncycastle: '1.81',
  reformLogging: '6.1.9',
  springfoxSwagger: '2.9.2',
  service_auth: '5.3.2',
  pdfbox: '3.0.5',
  flyway: "$flywayVersion",
  postgresql: "$postgresqlVersion"
]

configurations.all {
  exclude group: 'org.springframework.security', module: 'spring-security-rsa'
  exclude group: 'org.springframework.boot', module: 'spring-boot-starter-security'
}

dependencies {
  implementation group: 'javax.xml.bind', name: 'jaxb-api', version: '2.3.1'
  implementation group: 'org.eclipse.jetty', name: 'jetty-util', version: '12.0.22'
  implementation group: 'org.eclipse.jetty', name: 'jetty-server', version: '12.0.22'
  implementation group: 'org.apache.httpcomponents.client5', name: 'httpclient5', version: '5.5'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-openfeign', version: '4.3.0'
  implementation group: 'org.springframework.boot', name: 'spring-boot-properties-migrator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-web'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-actuator'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-aop'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-json'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-mail'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation'
  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-batch'
  implementation group: 'org.springframework.boot', name: 'spring-boot-configuration-processor'

  runtimeOnly group: 'org.flywaydb', name: 'flyway-database-postgresql', version: versions.flyway
  implementation group: 'org.flywaydb', name: 'flyway-core', version: versions.flyway
  implementation group: 'org.postgresql', name: 'postgresql', version: versions.postgresql

  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-provider-jdbc-template', version: '6.9.0'
  implementation group: 'net.javacrumbs.shedlock', name: 'shedlock-spring', version: '6.9.0'

  implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.9'

  implementation group: 'com.github.hmcts.java-logging', name: 'logging', version: versions.reformLogging
  implementation group: 'com.github.hmcts.java-logging', name: 'logging-appinsights', version: versions.reformLogging
  implementation group: 'net.logstash.logback', name: 'logstash-logback-encoder', version: '8.1'
  implementation group: 'com.github.hmcts', name: 'service-auth-provider-java-client', version: versions.service_auth

  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-netflix-hystrix', version: '2.2.10.RELEASE'
  implementation group: 'org.springframework.cloud', name: 'spring-cloud-starter-bootstrap', version: '4.3.0'
  implementation group: 'io.github.openfeign', name: 'feign-httpclient', version: '13.6'

  implementation group: 'com.hierynomus', name: 'sshj', version: '0.40.0'
  implementation group: 'org.apache.pdfbox', name: 'pdfbox', version: versions.pdfbox
  implementation group: 'org.apache.pdfbox', name: 'pdfbox-io', version: versions.pdfbox
  implementation group: 'org.apache.commons', name: 'commons-csv', version: '1.14.0'

  implementation group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'
  implementation group: 'io.hypersistence', name: 'hypersistence-utils-hibernate-63', version: '3.10.1'

  implementation group: 'org.bouncycastle', name: 'bcprov-jdk18on', version: versions.bouncycastle
  implementation group: 'org.bouncycastle', name: 'bcpkix-jdk18on', version: versions.bouncycastle
  implementation group: 'org.bouncycastle', name: 'bcpg-jdk18on', version: versions.bouncycastle

  implementation group: 'io.github.resilience4j', name: 'resilience4j-spring-boot3', version: '2.3.0'

  implementation group: 'com.launchdarkly', name: 'launchdarkly-java-server-sdk', version: '7.10.1'

  testImplementation group: 'org.apiguardian', name: 'apiguardian-api', version: '1.1.2'

  testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test'
  testImplementation group: 'com.icegreen', name: 'greenmail', version: '2.1.3'
  testImplementation 'org.apache.commons:commons-email2-jakarta:2.0.0-M2-SNAPSHOT'
  testImplementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.17.0'
  testImplementation group: 'org.apache.pdfbox', name: 'pdfbox-io', version: versions.pdfbox
  testImplementation group: 'org.apache.pdfbox', name: 'preflight', version: versions.pdfbox
  testImplementation group: 'com.github.tomakehurst', name: 'wiremock-jre8-standalone', version: '3.0.1'
  testImplementation group: 'com.github.hmcts', name: 'fortify-client', version: '1.4.9', classifier: 'all'
  testImplementation group: 'io.github.hakky54', name: 'logcaptor', version: '2.11.0'

  integrationTestImplementation sourceSets.main.runtimeClasspath
  integrationTestImplementation sourceSets.test.runtimeClasspath
  integrationTestImplementation group: 'org.apache.sshd', name: 'sshd-scp', version: '2.15.0'
  integrationTestImplementation group: 'org.apache.sshd', name: 'sshd-sftp', version: '2.15.0'
  integrationTestImplementation group: 'org.testcontainers', name: 'postgresql', version: '1.21.1'
  integrationTestImplementation group: 'org.awaitility', name: 'awaitility', version: '4.3.0'

  smokeTestImplementation sourceSets.main.runtimeClasspath
  smokeTestImplementation sourceSets.test.runtimeClasspath
  smokeTestImplementation group: 'io.rest-assured', name: 'rest-assured', version: '5.5.5'

  functionalTestImplementation sourceSets.smokeTest.runtimeClasspath
}

processFunctionalTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processSmokeTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

processIntegrationTestResources {
    duplicatesStrategy = DuplicatesStrategy.INCLUDE
}

mainClassName = 'uk.gov.hmcts.reform.sendletter.Application'

bootJar {
  getArchiveFileName().set(provider {
    'send-letter-service.jar'
  })

  manifest {
    attributes('Implementation-Version': project.version.toString())
  }
}

task migratePostgresDatabase(type: FlywayMigrateTask) {
  baselineOnMigrate = true
  if (project.hasProperty("dburl")) {
    url = "jdbc:postgresql://${dburl}"
  }
}
