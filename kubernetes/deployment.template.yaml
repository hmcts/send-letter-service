# Kubernetes send-letter-service resource template
#
# All variables are replaced at deployment time with environment variables.
#
# The following variables are derived as follows by the pipeline. DO NOT CHANGE:
#
#   - NAMESPACE:    product
#   - SERVICE_NAME: product-component-branch
#   - IMAGE_NAME:   registry-name/hmcts/product-component:branch
#
---
#
# Send Letter Service Config
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: send-letter-config
  namespace: ${NAMESPACE}
data:
  # logging
  APPINSIGHTS_INSTRUMENTATIONKEY: "00000000-0000-0000-0000-000000000000"
  # db
  LETTER_TRACKING_DB_NAME: letter_tracking
  LETTER_TRACKING_DB_HOST: localhost
  LETTER_TRACKING_DB_PORT: "5432"
  LETTER_TRACKING_DB_USER_NAME: letterservice
  LETTER_TRACKING_DB_PASSWORD: letterpassword
  # db - migration
  FLYWAY_URL: "jdbc:postgresql://localhost:5432/letter_tracking"
  FLYWAY_USER: letterservice
  FLYWAY_PASSWORD: letterpassword
  FLYWAY_NOOP_STRATEGY: "false"
  # encryption
  ENCRYPTION_ENABLED: "false"
  ENCRYPTION_PUBLIC_KEY: ""
  # schedules
  SCHEDULING_ENABLED: "true"
  # inherited
  LOGBACK_REQUIRE_ALERT_LEVEL: "false"
  LOGBACK_REQUIRE_ERROR_CODE: "false"
---
#
# Postgres Config
#
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-config
  namespace: ${NAMESPACE}
data:
  POSTGRES_DB: letter_tracking
  POSTGRES_USER: letterservice
  POSTGRES_PASSWORD: letterpassword
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
spec:
  replicas: 1
  selector:
    matchLabels:
      app: ${SERVICE_NAME}
  template:
    metadata:
      labels:
        app: ${SERVICE_NAME}
    spec:
      containers:
        - image: postgres:10-alpine
          name: send-letter-postgres
          envFrom:
            - configMapRef:
                name: postgres-config
          resources:
            requests:
              memory: "256Mi"
              cpu: "200m"
            limits:
              memory: "1024Mi"
              cpu: "1000m"
          imagePullPolicy: Always
        - image: ${IMAGE_NAME}
          name: ${SERVICE_NAME}
          envFrom:
            - configMapRef:
                name: send-letter-config
            - configMapRef:
                name: postgres-config
          env:
            - name: S2S_NAME
              value: "send_letter_tests"
            - name: S2S_SECRET
              value: "${TEST_S2S_SECRET}"
            - name: S2S_URL
              value: "http://rpe-service-auth-provider-aat.service.core-compute-aat.internal"
            - name: FTP_HOSTNAME
              value: "cmseft.services.xerox.com"
            - name: FTP_PORT
              value: "22"
            - name: FTP_FINGERPRINT
              value: "SHA256:gYzreAtWAraVRFsOrcP9SPJq9atn7QxXh9pAauKud2U"
            - name: FTP_TARGET_FOLDER
              value: "TO_XEROX"
            - name: FTP_USER
              value: "${TEST_FTP_USER}"
            - name: FTP_PRIVATE_KEY
              value: "${TEST_FTP_PRIVATE_KEY}"
            - name: FTP_PUBLIC_KEY
              value: "${TEST_FTP_PUBLIC_KEY}"
            - name: FTP_REPORTS_FOLDER
              value: "FROM_XEROX"
          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1024Mi"
              cpu: "2500m"
          ports:
            - containerPort: 8485
              name: http
          imagePullPolicy: Always
          livenessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 3
          readinessProbe:
            httpGet:
              path: /health
              port: http
            initialDelaySeconds: 45
            periodSeconds: 15
            timeoutSeconds: 3
---
#
# Service
#
apiVersion: v1
kind: Service
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
  labels:
    app: ${SERVICE_NAME}
spec:
  ports:
    - name: http
      protocol: TCP
      port: 80
      targetPort: 8485
  selector:
    app: ${SERVICE_NAME}
---
#
# Ingress
#
apiVersion: extensions/v1beta1
kind: Ingress
metadata:
  name: ${SERVICE_NAME}
  namespace: ${NAMESPACE}
  annotations:
    kubernetes.io/ingress.class: traefik
spec:
  rules:
    - host: ${SERVICE_FQDN}
      http:
        paths:
          - path: /
            backend:
              serviceName: ${SERVICE_NAME}
              servicePort: 80
